Document ← &( References ) ( interblockspace Block )* blankline* eof

spacechar ← [:Zs:]
sp ← [:Zs:]?
spnl ← sp (newline sp)?
specialchar ← [* _ ` & < ! \ [ U+005D ]
newline ← [U+000D]? [U+000A]
normalchar ← [^] !( specialchar / spacechar / newline)
blankline ← spacechar* newline
eof ← !([^])
interblockspace ← blankline*
line ← ( ( [^] !(newline) )* newline ) / ( [^] eof )
nonemptyline ← ( [^] !(newline) )+ newline
space ← spacechar+
lineof_star ← nonindentspace ("*" sp){3} newline blankline+
lineof_dash ← nonindentspace ("-" sp){3} newline blankline+
bullet ← nonindentspace ( "+" / ("*" !(lineof_star)) / ( "-" !(lineof_dash) ) ) space
enumerator ← nonindentspace [0-9]+ "." space
nonindentspace ← " "{0,3}
; Need to work out what ' / ""' does
; indent = p"    " + (nonindentspace * p"\t") / ""
indent ← "    " / ( nonindentspace [U+0009] )

; openblocktag = p"<" * spnl * lpeg.Cg(blocktag, "opentag") * spnl * htmlattribute^0 * p">"
openblocktag ← "<" spnl blocktag spnl htmlattribute* ">"
; This is slightly more permissive than the lua one, as it matches opening and
; closing tag names
closeblocktag ← "<" spnl "/" blocktag spnl ">"
blocktag ← "address" / "blockqoute" / "center" / "dir" / "div" / "dl"
         / "fieldset" / "form" / "h1" / "h2" / "h3" / "h4" / "h5"
         / "h6" / "hr" / "isindex" / "menu" / "noframes" / "noscript"
         / "ol" / "p" / "pre" / "table" / "ul" / "dd" / "ht"
         / "frameset" / "li" / "tbody" / "td" / "tfoot" / "th"
         / "thead" / "tr" / "script"


References ← ( Reference / ( nonemptyline+ blankline+ ) / line )* blankline* eof

Block ← Blockquote / Verbatim / Reference / HorizontalRule / Heading
      / OrderedList / BulletList / HtmlBlock / Para / Plain

Heading ← AtxHeading / SetextHeading
AtxStart ← "#"{1,6}
AtxInline ← Inline !( AtxEnd )
AtxEnd ← sp "#"* sp newline blankline*
AtxHeading ← AtxStart sp AtxInline+ AtxEnd
SetextHeading ← SetextHeadingBig / SetextHeadingSmall
SetextHeadingBig ← ( Inline !( Endline ) )+ newline "="{3,} newline blankline
SetextHeadingSmall ← ( Inline !( Endline ) )+ newline "-"{3,} newline blankline

BulletList ← BulletListTight / BulletListLoose
BulletListTight ← ( bullet ListItem )+ blankline*
BulletListLoose ← ( bullet ListItem blankline* )+
OrderedList ← OrderedListTight / OrderedListLoose
OrderedListTight ← ( enumerator ListItem )+ blankline*
OrderedListLoose ← ( enumerator ListItem blankline* )+
ListItem ← ListBlock ( NestedList / ListContinuationBlock* )
ListBlock ← line ListBlockLine*
ListContinuationBlock ← blankline* indent ListBlock
NestedList ← ( optionallyindentedline !( bullet / enumerator ) )+
ListBlockLine ← 

InBlockTags ← openblocktag ( HtmlBlock / ( [^] !( closeblocktag ) ) )* closeblocktag
HtmlBlock ← InBlockTags selfclosingblocktag htmlcomment blankline+

BlockquoteLine ← ( ( nonindentspace ">" " "? linechar* newline )+
                 ( ( linechar+ !( blankline ) ) newline )* blankline* )+
Blockquote ← ( BlockquoteLine !( blankline ) )+

VerbatimChunk ← blankline* ( indentedline !( blankline ) )+
Verbatim ← VerbatinChunk+ ( blankline+ / eof )

Label ← 
RefTitle ←
RefSrc ← nonspacechar+
Reference ← nonindentspace Inline+ newline blankline+

Plain ← Inline+

Inline ← Endline / UlOrStarLine / Space / Strong / Emph / Image / Link
       / Code / RawHtml / Entity / EscapedChar / Symbol

RawHtml ← htmlcomment / htmltag

EscapedChar ← "\\" [^] !( newline )

Entity ← HexEntity / DecEntity / CharEntity
HexEntity ← "&#" [Xx] [0-9a-fA-F]+ ";"
DecEntity ← "&#" [0-9]+ ";"
CharEntity ← "&" alphanumeric+ ";"

Endline ← LineBreak / TerminalEndline / NormalEndline
NormalEndline ← 
TerminalEndline ← sp newline eof
LineBreak ← "  " NormalEndline

Code ← inticks

UlOrStarLine ← "*"{4,} / "_"{4,} / space [*_]+ &( space )

Emph ← EmphStar / EmphUl
EmphStar ← "*" !( spacechar / newline ) ( Inline !( "*" ) )+ "*"
EmphUl ← "_" !( spacechar / newline ) ( Inline !( "_" ) )+ "_"

Strong ← StrongStar / StrongUl
StrongStar ← "**" !( spacechar / newline ) ( Inline !( "**" ) )+ "**"
StrongUl ← "__" !( spacechar / newline ) ( Inline !( "__" ) )+ "__"

Image ← "!" ( ExplicitLink / ReferenceLink )
Link ← ExplicitLink / ReferenceLink / AutoLinkUrl / AutoLinkEmail
ReferenceLink ← ReferenceLinkDouble / ReferenceLinkSingle
ReferenceLinkDouble ← Label spnl Label
ReferenceLinkSingle ← Label spnl "[]"?
AutoLinkUrl ← "<" ( alphanumeric+ "://" ( [^] !( newline / ">" ) )+ ) ">"
AutoLinkEmail = "<" ( ( alphanumeric / [-_+] )+ "@" ( [^] !( newline / ">" ) )+ ) ">"

BasicSource ← ( nonspacechar !( [()>] ) )+
            / ( "(" Source ")" )+
            / ""
AngleSource ← "<" BasicSource ">"
Source ← AngleSource / BasicSource

LinkTitle ← ["] ( [^] !( ["] sp ")" ) )*
          / "'" ( [^] !( "'" sp ")" ) )*
          / ""

ExplicitLink ← Label spnl "(" sp Source spnl LinkTitle sp ")"

Str ← normalchar+
Space ← spacechar+
Symbol ← specialchar
