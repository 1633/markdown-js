Document ← &( References ) ( P_interblockspace Block )* P_blankline* P_eof

P_spacechar ← [ U+0020 U+0009 ]
P_sp ← P_spacechar?
P_spnl ← P_sp (P_newline P_sp)?
P_specialchar ← [* _ ` & < ! \ [ U+005D ]
P_newline ← [U+000D]? [U+000A]
P_normalchar ← [^] !( P_specialchar / P_spacechar / P_newline)
P_blankline ← P_spacechar* P_newline
P_eof ← !([^])
P_interblockspace ← P_blankline*
P_line ← ( ( [^] !(P_newline) )* P_newline ) / ( [^] P_eof )
P_nonemptyline ← ( [^] !(P_newline) )+ P_newline
P_space ← P_spacechar+
P_lineof_star ← P_nonindentspace ("*" P_sp){3} P_newline P_blankline+
P_lineof_dash ← P_nonindentspace ("-" P_sp){3} P_newline P_blankline+
P_bullet ← P_nonindentspace ( "+" / ("*" !(P_lineof_star)) / ( "-" !(P_lineof_dash) ) ) P_space
P_enumerator ← P_nonindentspace [0-9]+ "." P_space
P_nonindentspace ← " "{0,3}
; Need to work out what ' / ""' does
; indent = p"    " + (nonindentspace * p"\t") / ""
P_indent ← " "{4} / ( P_nonindentspace [U+0009] )

; openblocktag = p"<" * spnl * lpeg.Cg(blocktag, "opentag") * spnl * htmlattribute^0 * p">"
P_openblocktag ← "<" P_spnl P_blocktag P_spnl P_htmlattribute* ">"
; This is slightly more permissive than the lua one, as it matches opening and
; closing tag names
P_closeblocktag ← "<" P_spnl "/" P_blocktag P_spnl ">"
P_blocktag ← "address" / "blockqoute" / "center" / "dir" / "div" / "dl"
         / "fieldset" / "form" / "h1" / "h2" / "h3" / "h4" / "h5"
         / "h6" / "hr" / "isindex" / "menu" / "noframes" / "noscript"
         / "ol" / "p" / "pre" / "table" / "ul" / "dd" / "ht"
         / "frameset" / "li" / "tbody" / "td" / "tfoot" / "th"
         / "thead" / "tr" / "script"

P_alphanumeric ← [A-Z a-z 0-9]
P_singlequoted ← ( "'" ( [^] !( P_blankline / "'" ) )* "'" )+
P_doublequoted ← ( [U+022] ( [^] !( P_blankline / [U+0022] ) )* [U+0022] )+
P_htmlattributevalue ← ( P_singlequoted / P_doublequoted )
                     / ( [^] !(P_spacechar) )+

P_htmlattribute ← ( P_alphanumeric / [_-] )+ P_spnl ("=" P_spnl P_htmlattributevalue)? P_spnl



References ← ( Reference / ( P_nonemptyline+ P_blankline+ ) / P_line )* P_blankline* P_eof

Block ← Blockquote / Verbatim / Reference / HorizontalRule / Heading
      / OrderedList / BulletList / HtmlBlock / Para / Plain

Heading ← AtxHeading / SetextHeading
AtxStart ← "#"{1,6}
AtxInline ← Inline !( AtxEnd )
AtxEnd ← P_sp "#"* P_sp P_newline P_blankline*
AtxHeading ← AtxStart P_sp AtxInline+ AtxEnd
SetextHeading ← SetextHeadingBig / SetextHeadingSmall
SetextHeadingBig ← ( Inline !( Endline ) )+ P_newline "="{3,} P_newline P_blankline
SetextHeadingSmall ← ( Inline !( Endline ) )+ P_newline "-"{3,} P_newline P_blankline

BulletList ← BulletListTight / BulletListLoose
BulletListTight ← ( P_bullet ListItem )+ P_blankline*
BulletListLoose ← ( P_bullet ListItem P_blankline* )+
OrderedList ← OrderedListTight / OrderedListLoose
OrderedListTight ← ( P_enumerator ListItem )+ P_blankline*
OrderedListLoose ← ( P_enumerator ListItem P_blankline* )+
ListItem ← ListBlock ( NestedList / ListContinuationBlock* )
ListBlock ← P_line ListBlockLine*
ListContinuationBlock ← P_blankline* P_indent ListBlock
NestedList ← ( P_optionallyindentedline !( P_bullet / P_enumerator ) )+
ListBlockLine ←  !( P_blankline ) !( P_indent? ( P_bullet / P_enumerator ) ) P_optionallyindentedline

InBlockTags ← P_openblocktag ( HtmlBlock / ( [^] !( P_closeblocktag ) ) )* P_closeblocktag
HtmlBlock ← InBlockTags P_selfclosingblocktag P_htmlcomment P_blankline+

BlockquoteLine ← ( ( P_nonindentspace ">" " "? P_linechar* P_newline )+
                 ( ( P_linechar+ !( P_blankline ) ) P_newline )* P_blankline* )+
Blockquote ← ( BlockquoteLine !( P_blankline ) )+

VerbatimChunk ← P_blankline* ( P_indentedline !( P_blankline ) )+
Verbatim ← VerbatinChunk+ ( P_blankline+ / P_eof )

Label ← "[" ( "" &( ( ( Label / Inline ) !( "]" ) )+ ) )
        ( Label / ( Inline !( "]" ) ) )+ "]"
RefTitle ← ["] ( [^] !( ["]? P_blankline ) )* ["]
         \ "'" ( [^] !( "'"? P_blankline ) )* "'"
         \ "(" ( [^] !( ")" P_blankline ) )* ")"
         \ ""
RefSrc ← P_nonspacechar+
Reference ← P_nonindentspace Inline+ P_newline P_blankline+

Plain ← Inline+

Inline ← Endline / UlOrStarLine / Space / Strong / Emph / Image / Link
       / Code / RawHtml / Entity / EscapedChar / Symbol

RawHtml ← P_htmlcomment / P_htmltag

EscapedChar ← "\\" [^] !( P_newline )

Entity ← HexEntity / DecEntity / CharEntity
HexEntity ← "&#" [Xx] [0-9a-fA-F]+ ";"
DecEntity ← "&#" [0-9]+ ";"
CharEntity ← "&" P_alphanumeric+ ";"

Endline ← LineBreak / TerminalEndline / NormalEndline
NormalEndline ← 
TerminalEndline ← P_sp P_newline P_eof
LineBreak ← "  " NormalEndline

Code ← P_inticks

UlOrStarLine ← "*"{4,} / "_"{4,} / P_space [*_]+ &( P_space )

Emph ← EmphStar / EmphUl
EmphStar ← "*" !( P_spacechar / P_newline ) ( Inline !( "*" ) )+ "*"
EmphUl ← "_" !( P_spacechar / P_newline ) ( Inline !( "_" ) )+ "_"

Strong ← StrongStar / StrongUl
StrongStar ← "**" !( P_spacechar / P_newline ) ( Inline !( "**" ) )+ "**"
StrongUl ← "__" !( P_spacechar / P_newline ) ( Inline !( "__" ) )+ "__"

Image ← "!" ( ExplicitLink / ReferenceLink )
Link ← ExplicitLink / ReferenceLink / AutoLinkUrl / AutoLinkEmail
ReferenceLink ← ReferenceLinkDouble / ReferenceLinkSingle
ReferenceLinkDouble ← Label P_spnl Label
ReferenceLinkSingle ← Label P_spnl "[]"?
AutoLinkUrl ← "<" ( P_alphanumeric+ "://" ( [^] !( P_newline / ">" ) )+ ) ">"
AutoLinkEmail = "<" ( ( P_alphanumeric / [-_+] )+ "@" ( [^] !( P_newline / ">" ) )+ ) ">"

BasicSource ← ( P_nonspacechar !( [()>] ) )+
            / ( "(" Source ")" )+
            / ""
AngleSource ← "<" BasicSource ">"
Source ← AngleSource / BasicSource

LinkTitle ← ["] ( [^] !( ["] P_sp ")" ) )*
          / "'" ( [^] !( "'" P_sp ")" ) )*
          / ""

ExplicitLink ← Label P_spnl "(" P_sp Source P_spnl LinkTitle P_sp ")"

Str ← P_normalchar+
Space ← P_spacechar+
Symbol ← P_specialchar
