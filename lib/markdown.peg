; This grammar is largely ported from http://github.com/jgm/lunamark
; It was ported and modified by Dominic Baggott and Ash Berlin for
; http://github.com/evilstreak/markdown-js
; As with the original, it's released under an MIT license
Document ← ( P_interblockspace Block )* P_blankline* P_eof


; 'Generics' from lunamark/parser/generic.lua
P_spacechar ← [U+0020 U+0009]
P_newline ← [U+000D]? [U+000A]
P_nonspacechar ← !(P_newline / P_spacechar) [^]
P_sp ← P_spacechar?
P_space ← P_spacechar+
P_eof ← !([^])
P_nonindentspace ← " "{0,3}
P_blankline ← P_sp P_newline
P_skipblanklines ← (P_blankline)*
P_linechar ← !(P_newline) [^]
; Need to work out what ' / ""' does
; indent = p"    " + (nonindentspace * p"\t") / ""
P_indent ← " "{4} / ( P_nonindentspace [U+0009] )
P_indentedline ← P_indent P_linechar+ (P_newline / P_eof)
P_optionallyindentedline ← P_indent? P_linechar+ (P_newline / P_eof)
P_spnl ← P_sp (P_newline P_sp)?
P_specialchar ← [* _ ` & < ! \ U+005B U+005D ]
P_normalchar ← !( P_specialchar / P_spacechar / P_newline) [^]
P_alphanumeric ← [A-Z a-z 0-9]
P_line ← ( P_linechar* P_newline ) / ( [^]+ P_eof )
P_nonemptyline ← P_linechar+ P_newline

P_singlequoted ← [U+0027] ( !( P_blankline / [U+0027] ) [^] )* [U+0027]
P_doublequoted ← [U+0022] ( !( P_blankline / [U+0022] ) [^] )* [U+0022]
P_htmlattributevalue ← ( P_singlequoted / P_doublequoted ) / ( !(P_spacechar) [^] )+
P_htmlattribute ← ( P_alphanumeric / [_-] )+ P_spnl ("=" P_spnl P_htmlattributevalue)? P_spnl
P_htmlcomment ← "<!--" ( !("-->") [^] )* "-->"
P_htmltag ← "<" P_spnl "/"? P_alphanumeric+ P_spnl P_htmlattribute* "/"? P_spnl ">"

; TODO: is {3} really 3 or more, or is it just 3?
P_lineof_star ← P_nonindentspace ("*" P_sp){3} P_newline P_blankline+
P_lineof_dash ← P_nonindentspace ("-" P_sp){3} P_newline P_blankline+
P_lineof_underscore ← P_nonindentspace ("_" P_sp){3} P_newline P_blankline+
P_bullet ← P_nonindentspace ( "+" / ( !(P_lineof_star) "*" ) / ( !(P_lineof_dash) "-" ) ) P_space
P_enumerator ← P_nonindentspace [0-9]+ "." P_space

; TODO: support multiple ticks, ala: ``foo`bar``
; openticks = lpeg.Cg(p"`"^1, "ticks")
; closeticks = sp * lpeg.Cmt(c(p"`"^1) * lpeg.Cb("ticks"), function(s,i,a,b) return string.len(a) == string.len(b) and i end)
; inticks = openticks * sp * c((p(1) - (blankline + closeticks))^1) * closeticks
P_inticks ← "`" P_sp ( !( P_blankline / "`" ) [^] )+ "`"

P_blocktag ← "address" / "blockqoute" / "center" / "dir" / "div" / "dl"
         / "fieldset" / "form" / "h1" / "h2" / "h3" / "h4" / "h5"
         / "h6" / "hr" / "isindex" / "menu" / "noframes" / "noscript"
         / "ol" / "p" / "pre" / "table" / "ul" / "dd" / "ht"
         / "frameset" / "li" / "tbody" / "td" / "tfoot" / "th"
         / "thead" / "tr" / "script"

; openblocktag = p"<" * spnl * lpeg.Cg(blocktag, "opentag") * spnl * htmlattribute^0 * p">"
P_openblocktag ← "<" P_spnl P_blocktag P_spnl P_htmlattribute* ">"
; This is slightly more permissive than the lua one, as it matches opening and
; closing tag names
P_closeblocktag ← "<" P_spnl "/" P_blocktag P_spnl ">"

; TODO: Why is there an optional '/' at the start?
P_selfclosingblocktag ← "<" P_spnl "/"? P_spnl P_blocktag P_spnl P_htmlattribute* "/" P_spnl ">"

; TODO: The lua version only yields a blank line unless we're at the beginning of the document
; We can't do that yet tho.
P_interblockspace ← P_blankline*



;References ← ( Reference / ( P_nonemptyline+ P_blankline+ ) / P_line )* P_blankline* P_eof

Block ← Blockquote / Verbatim / Reference / HorizontalRule / Heading
      / OrderedList / BulletList / HtmlBlock / Para / Plain

Heading ← AtxHeading / SetextHeading
AtxStart ← "#"{1,6}
AtxInline ← ( !( AtxEnd ) Inline )+
AtxEnd ← P_sp "#"* P_sp P_newline P_blankline*
AtxHeading ← AtxStart P_sp AtxInline AtxEnd
SetextHeading ← SetextHeadingBig / SetextHeadingSmall
SetextHeadingBig ← ( !( Endline ) Inline )+ P_newline "="{3,} P_newline P_blankline*
SetextHeadingSmall ← ( !( Endline ) Inline )+ P_newline "-"{3,} P_newline P_blankline*

BulletList ← BulletListTight / BulletListLoose
BulletListTight ← ( P_bullet ListItem )+ P_blankline* !( P_bullet )
BulletListLoose ← ( P_bullet ListItem P_blankline* )+
OrderedList ← OrderedListTight / OrderedListLoose
OrderedListTight ← ( P_enumerator ListItem )+ P_blankline* !( P_enumerator )
OrderedListLoose ← ( P_enumerator ListItem P_blankline* )+
ListItem ← ListBlock ( NestedList / ListContinuationBlock* )
ListBlock ← P_line ListBlockLine*
ListContinuationBlock ← P_blankline* P_indent ListBlock
NestedList ← ( !( P_bullet / P_enumerator ) P_optionallyindentedline )+
ListBlockLine ←  !( P_blankline ) !( P_indent? ( P_bullet / P_enumerator ) ) P_optionallyindentedline

InBlockTags ← P_openblocktag ( HtmlBlock / ( !( P_closeblocktag ) [^] ) )* P_closeblocktag
HtmlBlock ← InBlockTags P_selfclosingblocktag P_htmlcomment P_blankline+

BlockquoteLine ← ( ( P_nonindentspace ">" " "? P_linechar* P_newline )+
                 ( !( P_blankline ) P_linechar+ P_newline )* P_blankline* )+
Blockquote ← ( !( P_blankline ) BlockquoteLine )+

VerbatimChunk ← P_blankline* ( !( P_blankline ) P_indentedline )+
Verbatim ← VerbatimChunk+ ( P_blankline+ / P_eof )

Label ← "[" ( !( "]" ) ( Label / Inline ) )+ "]"
RefTitle ← ["] ( !( ["]? P_blankline ) [^] )* ["]
         / "'" ( !( "'"? P_blankline ) [^] )* "'"
         / "(" ( !( ")" P_blankline ) [^] )* ")"
         / ""
RefSrc ← P_nonspacechar+
;Reference = generic.nonindentspace * _"Label" * p":" * generic.spnl * _"RefSrc" * generic.spnl * _"RefTitle" * generic.blankline^0 / writer.reference,;
Reference ← P_nonindentspace Label ":" P_spnl RefSrc P_spnl RefTitle P_blankline*

HorizontalRule ← P_lineof_star / P_lineof_dash / P_lineof_underscore

Para ← P_nonindentspace Inline+ P_newline P_blankline+

Plain ← Inline+

Inline ← Str / Endline / UlOrStarLine / Space / Strong / Emph / Image / Link
       / Code / RawHtml / Entity / EscapedChar / Symbol

RawHtml ← P_htmlcomment / P_htmltag

EscapedChar ← [U+005C] !( P_newline ) [^]

Entity ← HexEntity / DecEntity / CharEntity
HexEntity ← "&#" [Xx] [0-9a-fA-F]+ ";"
DecEntity ← "&#" [0-9]+ ";"
CharEntity ← "&" P_alphanumeric+ ";"

Endline ← LineBreak / TerminalEndline / NormalEndline
NormalEndline ←  P_sp P_newline !( P_blankline / ">" / AtxStart / ( P_line [-=]{3,} P_newline ) )
TerminalEndline ← P_sp P_newline P_eof
LineBreak ← "  " NormalEndline

Code ← P_inticks

UlOrStarLine ← "*"{4,} / "_"{4,} / P_space [*_]+ &( P_space )

Emph ← EmphStar / EmphUl
EmphStar ← "*" !( P_spacechar / P_newline ) ( !( "*" ) Inline )+ "*"
EmphUl ← "_" !( P_spacechar / P_newline ) ( !( "_" ) Inline )+ "_"

Strong ← StrongStar / StrongUl
StrongStar ← "**" !( P_spacechar / P_newline ) ( !( "**" ) Inline )+ "**"
StrongUl ← "__" !( P_spacechar / P_newline ) ( !( "__" ) Inline )+ "__"

Image ← "!" ( ExplicitLink / ReferenceLink )
Link ← ExplicitLink / ReferenceLink / AutoLinkUrl / AutoLinkEmail
ReferenceLink ← ReferenceLinkDouble / ReferenceLinkSingle
ReferenceLinkDouble ← Label P_spnl Label
ReferenceLinkSingle ← Label ( P_spnl "[]" )?
AutoLinkUrl ← "<" ( P_alphanumeric+ "://" ( !( P_newline / ">" ) [^] )+ ) ">"
AutoLinkEmail ← "<" ( P_alphanumeric / [-_+] )+ "@" ( !( P_newline / ">" ) [^] )+ ">"

BasicSource ← ( !( [()>] ) P_nonspacechar )+
            / ( "(" Source ")" )+
            / ""
AngleSource ← "<" BasicSource ">"
Source ← AngleSource / BasicSource

LinkTitle ← ["] ( !( ["] P_sp ")" ) [^] )* ["]
          / "'" ( !( "'" P_sp ")" ) [^] )* "'"
          / ""

ExplicitLink ← Label P_spnl "(" P_sp Source P_spnl LinkTitle P_sp ")"

Str ← ( !( P_specialchar / P_spacechar / P_newline) [^] )+
Space ← P_spacechar+
Symbol ← P_specialchar
